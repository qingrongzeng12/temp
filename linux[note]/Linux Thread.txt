#include <pthread.h>

数据类型
pthread_t 线程句柄
pthread_attr_t 线程属性


线程操纵函数 
pthread_create() 创建一个线程
pthread_exit() 终止当前线程
pthread_cancel() 中断另外一个线程的运行
pthread_join() 阻塞当前的线程，直到另外一个线程运行结束
pthread_kill() 向线程发送一个信号
pthread_attr_init() 初始化线程的属性
pthread_attr_setdetachstate() 设置脱离状态的属性（决定这个线程在终止时是否可以被结合）
pthread_attr_getdetachstate() 获取脱离状态的属性
pthread_attr_destroy() 删除线程的属性


同步函数,用于 mutex 和条件变量
pthread_mutex_init() 初始化互斥锁
pthread_mutex_destroy() 删除互斥锁
pthread_mutex_lock() 占有互斥锁（阻塞操作）
pthread_mutex_trylock() 试图占有互斥锁（不阻塞操作）。即，当互斥锁空闲时，将占有该锁；否则，立即返回。
pthread_mutex_unlock()  释放互斥锁
pthread_mutexattr_()  互斥锁属性相关的函数

pthread_cond_init() 初始化条件变量
pthread_cond_destroy() 销毁条件变量
pthread_cond_signal()  唤醒第一个调用 pthread_cond_wait()而进入睡眠的线程
pthread_condattr_()  条件变量属性相关的函数
pthread_cond_wait()  等待条件变量的特殊条件发生;
实际上依次做了3件事 对当前mutex解锁、进入睡眠、被其它线程的信号唤醒后对当前mutex加锁。


Thread-local storage（线程特有数据） 

pthread_key_create()  分配用于标识进程中线程特定数据的键
pthread_key_delete()  销毁现有线程特定数据键
pthread_setspecific()  为指定线程特定数据键设置线程特定绑定
pthread_getspecific()  获取调用线程的键绑定，并将该绑定存储在 value 指向的位置中
pthread_rwlock_()  读写锁
pthread_barrier_()  同步屏障


工具函数 
pthread_equal()  对两个线程的线程标识号进行比较
pthread_detach()  分离线程
pthread_self()  查询线程自身线程标识号



线程的默认取消方式是延迟取消.
也就是当线程执行到一个取消点的时候，如果此时有未被处理的取消请求，则处理之。

`` pthread_self -- 获得线程自身的ID
   pthread_t pthread_self(void);
   pthread_t的类型为unsigned long int，所以在打印的时候要使用%lu方式


`` atexit -- 注册终止函数(即main执行结束后调用的函数)
   int atexit(void (*func)(void));
   exit调用这些注册函数的顺序与它们登记时候的顺序相反(堆栈结构),一个进程可以登记多达32个函数


`` pthread_setcancelstate --  设置线程是否可关闭的状态
   int pthread_setcancelstate(int state, int *oldstate);


`` pthread_create -- 创建线程.若线程创建成功，则返回0。若线程创建失败，则返回出错编号
   int pthread_create(pthread_t *thread, const pthread_attr_t *attr,
                   void *(*start_routine) (void *), void *arg);
   第一个参数为指向线程标识符的指针。
   第二个参数用来设置线程属性。
   第三个参数是线程运行函数的起始地址。
   最后一个参数是运行函数的参数。


`` pthread_cleanup_push -- 
void pthread_cleanup_push(void (*routine) (void  *),  void *arg)
void pthread_cleanup_pop(int execute)

pthread_cleanup_push()/pthread_cleanup_pop()采用先入后出的栈结构管理，void routine(void *arg)函数在调用pthread_cleanup_push()时压入清理函数栈，多次对pthread_cleanup_push()的调用将在清理函数栈中形成一个函数链，在执行该函数链时按照压栈的相反顺序弹出。execute参数表示执行到pthread_cleanup_pop()时是否在弹出清理函数的同时执行该函数，为0表示不执行，非0为执行；这个参数并不影响异常终止时清理函数的执行



`` pthread_mutex_lock 在成功完成之后会返回零。其他任何返回值都表示出现了错误。
   int pthread_mutex_lock(pthread_mutex_t *mutex);
   当pthread_mutex_lock()返回时，该互斥锁已被锁定。线程调用该函数让互斥锁上锁，如果该互斥锁已被另一个线程   锁定和拥有，则调用该线程将阻塞，直到该互斥锁变为可用为止。


pthread_cancel
发送终止信号给thread线程，如果成功则返回0，否则为非0值。发送成功并不意味着thread会终止。

pthread_detach 设置线程unjoinable属性

unjoinable属性可以在pthread_create时指定，或在线程创建后在线程中pthread_detach自己, 如：pthread_detach(pthread_self())，将状态改为unjoinable状态，确保资源的释放.
linux线程执行和windows不同，pthread有两种状态joinable状态和unjoinable状态，如果线程是joinable状态，当线程函数自己返回退出时或pthread_exit时都不会释放线程所占用堆栈和线程描述符（总计8K多）。只有当调用了pthread_join之后这些资源才会被释放。若是unjoinable状态的线程，这些资源在线程函数退出时或pthread_exit时自动会被释放。


unsigned int alarm（unsigned int seconds)
当在调用alarm()前已经设置了一个闹钟，那么我们可以调用alarm(0)来取消此闹钟，并返回剩余时间。
一个进程只能有一个闹钟时间，如果在调用alarm之前已设置过闹钟时间，则任何以前的闹钟时间都被新值所代替。

pthread_testcancel() creates a cancellation point within the calling thread


   